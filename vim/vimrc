runtime macros/matchit.vim

let mapleader=" "
let maplocalleader=","

if &compatible
  set nocompatible
endif

if !exists('g:syntax_on')
  syntax enable
endif

filetype on
filetype indent on
filetype plugin on

" FAST VIM!
set lazyredraw
set ttyfast
set ttyscroll=3

nmap 0 ^

imap jk <ESC>
imap kj <ESC>
imap <C-Return> <CR><CR><C-o>k<Tab>

nnoremap <leader><leader> <c-^>
nnoremap <leader>rc :tabedit ~/.vimrc<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gdi :Gdiff<CR>

" Folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Makes sure VIM doesn't add stuff on the cwd
set backupdir=$HOME/.vim/backups
set directory=$HOME/.vim/swaps

" Show line numbers with a width of 5
set number
set relativenumber
set numberwidth=2

set gdefault " Always substitute globaly

" set cursorline "Highlights the current line
" set colorcolumn=80

set splitbelow " Horizontal splits go below the current pane
set splitright " Vertical splits do to the right of the current pane

set wildignore=*.swp,*.bak,*.pyc,*.class "Ignore .pyc files and other tmp

set tildeop " Makes ~ behave like an operator

" I want tab to be of witdth 2 and never really be a tab
set expandtab
set shiftwidth=2
set softtabstop=2

set clipboard=unnamed
set clipboard=unnamedplus

set timeoutlen=1000 ttimeoutlen=0
set esckeys

set showmatch " highlights matching [{()}]

" Searching enhancements
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase
" Always keep search results in the center.
map N Nzz
map n nzz
nnoremap <leader>s :nohlsearch<CR>

call plug#begin('~/.vim/plugged')

Plug('dracula/vim')
Plug('ctrlpvim/ctrlp.vim')
Plug('christoomey/vim-tmux-navigator')
Plug('jiangmiao/auto-pairs')
Plug('tpope/vim-surround')
Plug('tpope/vim-repeat')
Plug('tpope/vim-endwise')
Plug('tpope/vim-fugitive')
Plug('tpope/vim-commentary')
Plug('tpope/vim-rails')
Plug('tpope/vim-speeddating')
Plug('tpope/vim-fugitive')
Plug('kana/vim-textobj-user')
Plug('kana/vim-textobj-entire')
Plug('nelstrom/vim-textobj-rubyblock')
Plug('kchmck/vim-coffee-script')
Plug('rking/ag.vim')
Plug('mattn/emmet-vim')
Plug('vim-airline/vim-airline')
Plug('vim-airline/vim-airline-themes')
Plug('honza/vim-snippets')
Plug('sirver/ultisnips')
Plug('vim-ruby/vim-ruby')
" Elixir
Plug('elixir-lang/vim-elixir')
Plug('slashmili/alchemist.vim')

" Linter
Plug('w0rp/ale')

" Tags
Plug('ludovicchabant/vim-gutentags')
let g:gutentags_cache_dir = '~/.tags_cache'

" These two go together because they are related to tests.
Plug('janko-m/vim-test')
Plug('christoomey/vim-tmux-runner')

Plug('chrisbra/csv.vim')

call plug#end()

" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l -Q --hidden --nocolor --ignore-dir _build -g ""'
let g:ctrlp_use_caching = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_lazy_update = 2

" Netwr better list style
let g:netrw_liststyle=3

" Set airline theme
let g:airline_theme='dracula'

" Configure Ale
let g:ale_sign_error = 'XX'
let g:ale_sign_warning = '!!'

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

syntax enable
set t_Co=256
set term=screen-256color
colorscheme dracula
set background=dark

hi Visual ctermbg=103 ctermfg=NONE

" Change cursor shape between insert and normal mode in iTerm3.app
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Configure tests
let test#strategy = "vtr"
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

map <leader>ct :silent !ctags -R .<CR>:redraw!<CR>
map <leader>rl :source ~/.vimrc<CR>
